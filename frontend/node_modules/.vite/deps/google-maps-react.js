import {
  require_prop_types
} from "./chunk-KK5XZ6VE.js";
import "./chunk-FH2XTGEL.js";
import {
  require_react_dom
} from "./chunk-CIQVVTPY.js";
import {
  require_server_browser
} from "./chunk-RIYWK4CQ.js";
import {
  require_react
} from "./chunk-ZOIWZPCO.js";
import {
  __commonJS
} from "./chunk-DFKQJ226.js";

// node_modules/google-maps-react/dist/lib/windowOrGlobal.js
var require_windowOrGlobal = __commonJS({
  "node_modules/google-maps-react/dist/lib/windowOrGlobal.js"(exports, module) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["module"], factory);
      } else if (typeof exports !== "undefined") {
        factory(module);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod);
        global2.windowOrGlobal = mod.exports;
      }
    })(exports, function(module2) {
      "use strict";
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      module2.exports = (typeof self === "undefined" ? "undefined" : _typeof(self)) === "object" && self.self === self && self || (typeof global === "undefined" ? "undefined" : _typeof(global)) === "object" && global.global === global && global || void 0;
    });
  }
});

// node_modules/google-maps-react/dist/lib/ScriptCache.js
var require_ScriptCache = __commonJS({
  "node_modules/google-maps-react/dist/lib/ScriptCache.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "./windowOrGlobal"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_windowOrGlobal());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.windowOrGlobal);
        global2.ScriptCache = mod.exports;
      }
    })(exports, function(exports2, window2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var counter = 0;
      var scriptMap = typeof window2 !== "undefined" && window2._scriptMap || /* @__PURE__ */ new Map();
      var ScriptCache = exports2.ScriptCache = function(global2) {
        global2._scriptMap = global2._scriptMap || scriptMap;
        return function ScriptCache2(scripts) {
          var Cache = {};
          Cache._onLoad = function(key) {
            return function(cb) {
              var registered = true;
              function unregister() {
                registered = false;
              }
              var stored = scriptMap.get(key);
              if (stored) {
                stored.promise.then(function() {
                  if (registered) {
                    stored.error ? cb(stored.error) : cb(null, stored);
                  }
                  return stored;
                }).catch(function(error) {
                  return cb(error);
                });
              } else {
              }
              return unregister;
            };
          };
          Cache._scriptTag = function(key, src) {
            if (!scriptMap.has(key)) {
              if (typeof document === "undefined")
                return null;
              var tag = document.createElement("script");
              var promise = new Promise(function(resolve, reject) {
                var body = document.getElementsByTagName("body")[0];
                tag.type = "text/javascript";
                tag.async = false;
                var cbName = "loaderCB" + counter++ + Date.now();
                var cb = void 0;
                var handleResult = function handleResult2(state) {
                  return function(evt) {
                    var stored = scriptMap.get(key);
                    if (state === "loaded") {
                      stored.resolved = true;
                      resolve(src);
                    } else if (state === "error") {
                      stored.errored = true;
                      reject(evt);
                    }
                    stored.loaded = true;
                    cleanup();
                  };
                };
                var cleanup = function cleanup2() {
                  if (global2[cbName] && typeof global2[cbName] === "function") {
                    global2[cbName] = null;
                    delete global2[cbName];
                  }
                };
                tag.onload = handleResult("loaded");
                tag.onerror = handleResult("error");
                tag.onreadystatechange = function() {
                  handleResult(tag.readyState);
                };
                if (src.match(/callback=CALLBACK_NAME/)) {
                  src = src.replace(/(callback=)[^\&]+/, "$1" + cbName);
                  cb = window2[cbName] = tag.onload;
                } else {
                  tag.addEventListener("load", tag.onload);
                }
                tag.addEventListener("error", tag.onerror);
                tag.src = src;
                body.appendChild(tag);
                return tag;
              });
              var initialState = {
                loaded: false,
                error: false,
                promise,
                tag
              };
              scriptMap.set(key, initialState);
            }
            return scriptMap.get(key).tag;
          };
          Object.keys(scripts).forEach(function(key) {
            var script = scripts[key];
            var tag = window2._scriptMap.has(key) ? window2._scriptMap.get(key).tag : Cache._scriptTag(key, script);
            Cache[key] = {
              tag,
              onLoad: Cache._onLoad(key)
            };
          });
          return Cache;
        };
      }(window2);
      exports2.default = ScriptCache;
    });
  }
});

// node_modules/google-maps-react/dist/lib/GoogleApi.js
var require_GoogleApi = __commonJS({
  "node_modules/google-maps-react/dist/lib/GoogleApi.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports);
        global2.GoogleApi = mod.exports;
      }
    })(exports, function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var GoogleApi = exports2.GoogleApi = function GoogleApi2(opts) {
        opts = opts || {};
        if (!opts.hasOwnProperty("apiKey")) {
          throw new Error("You must pass an apiKey to use GoogleApi");
        }
        var apiKey = opts.apiKey;
        var libraries = opts.libraries || ["places"];
        var client = opts.client;
        var URL = opts.url || "https://maps.googleapis.com/maps/api/js";
        var googleVersion = opts.version || "3.31";
        var script = null;
        var google2 = typeof window !== "undefined" && window.google || null;
        var loading = false;
        var channel = null;
        var language = opts.language;
        var region = opts.region || null;
        var onLoadEvents = [];
        var url = function url2() {
          var url3 = URL;
          var params = {
            key: apiKey,
            callback: "CALLBACK_NAME",
            libraries: libraries.join(","),
            client,
            v: googleVersion,
            channel,
            language,
            region,
            onerror: "ERROR_FUNCTION"
          };
          var paramStr = Object.keys(params).filter(function(k) {
            return !!params[k];
          }).map(function(k) {
            return k + "=" + params[k];
          }).join("&");
          return url3 + "?" + paramStr;
        };
        return url();
      };
      exports2.default = GoogleApi;
    });
  }
});

// node_modules/google-maps-react/dist/GoogleApiComponent.js
var require_GoogleApiComponent = __commonJS({
  "node_modules/google-maps-react/dist/GoogleApiComponent.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "react-dom", "./lib/ScriptCache", "./lib/GoogleApi"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_react_dom(), require_ScriptCache(), require_GoogleApi());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.reactDom, global2.ScriptCache, global2.GoogleApi);
        global2.GoogleApiComponent = mod.exports;
      }
    })(exports, function(exports2, _react, _reactDom, _ScriptCache, _GoogleApi) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.wrapper = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _reactDom2 = _interopRequireDefault(_reactDom);
      var _GoogleApi2 = _interopRequireDefault(_GoogleApi);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var defaultMapConfig = {};
      var serialize = function serialize2(obj) {
        return JSON.stringify(obj);
      };
      var isSame = function isSame2(obj1, obj2) {
        return obj1 === obj2 || serialize(obj1) === serialize(obj2);
      };
      var defaultCreateCache = function defaultCreateCache2(options) {
        options = options || {};
        var apiKey = options.apiKey;
        var libraries = options.libraries || ["places"];
        var version = options.version || "3";
        var language = options.language || "en";
        var url = options.url;
        var client = options.client;
        var region = options.region;
        return (0, _ScriptCache.ScriptCache)({
          google: (0, _GoogleApi2.default)({
            apiKey,
            language,
            libraries,
            version,
            url,
            client,
            region
          })
        });
      };
      var DefaultLoadingContainer = function DefaultLoadingContainer2(props) {
        return _react2.default.createElement(
          "div",
          null,
          "Loading..."
        );
      };
      var wrapper = exports2.wrapper = function wrapper2(input) {
        return function(WrappedComponent) {
          var Wrapper = function(_React$Component) {
            _inherits(Wrapper2, _React$Component);
            function Wrapper2(props, context) {
              _classCallCheck(this, Wrapper2);
              var _this = _possibleConstructorReturn(this, (Wrapper2.__proto__ || Object.getPrototypeOf(Wrapper2)).call(this, props, context));
              var options = typeof input === "function" ? input(props) : input;
              _this.initialize(options);
              _this.state = {
                loaded: false,
                map: null,
                google: null,
                options
              };
              _this.mapRef = _react2.default.createRef();
              return _this;
            }
            _createClass(Wrapper2, [{
              key: "UNSAFE_componentWillReceiveProps",
              value: function UNSAFE_componentWillReceiveProps(props) {
                if (typeof input !== "function") {
                  return;
                }
                var prevOptions = this.state.options;
                var options = typeof input === "function" ? input(props) : input;
                if (isSame(options, prevOptions)) {
                  return;
                }
                this.initialize(options);
                this.setState({
                  options,
                  loaded: false,
                  google: null
                });
              }
            }, {
              key: "componentWillUnmount",
              value: function componentWillUnmount() {
                if (this.unregisterLoadHandler) {
                  this.unregisterLoadHandler();
                }
              }
            }, {
              key: "initialize",
              value: function initialize(options) {
                if (this.unregisterLoadHandler) {
                  this.unregisterLoadHandler();
                  this.unregisterLoadHandler = null;
                }
                var createCache = options.createCache || defaultCreateCache;
                this.scriptCache = createCache(options);
                this.unregisterLoadHandler = this.scriptCache.google.onLoad(this.onLoad.bind(this));
                this.LoadingContainer = options.LoadingContainer || DefaultLoadingContainer;
              }
            }, {
              key: "onLoad",
              value: function onLoad(err, tag) {
                this._gapi = window.google;
                this.setState({ loaded: true, google: this._gapi });
              }
            }, {
              key: "render",
              value: function render() {
                var LoadingContainer = this.LoadingContainer;
                if (!this.state.loaded) {
                  return _react2.default.createElement(LoadingContainer, null);
                }
                var props = Object.assign({}, this.props, {
                  loaded: this.state.loaded,
                  google: window.google
                });
                return _react2.default.createElement(
                  "div",
                  null,
                  _react2.default.createElement(WrappedComponent, props),
                  _react2.default.createElement("div", { ref: this.mapRef })
                );
              }
            }]);
            return Wrapper2;
          }(_react2.default.Component);
          return Wrapper;
        };
      };
      exports2.default = wrapper;
    });
  }
});

// node_modules/google-maps-react/dist/lib/String.js
var require_String = __commonJS({
  "node_modules/google-maps-react/dist/lib/String.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports);
        global2.String = mod.exports;
      }
    })(exports, function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var camelize = exports2.camelize = function camelize2(str) {
        return str.split("_").map(function(word) {
          return word.charAt(0).toUpperCase() + word.slice(1);
        }).join("");
      };
    });
  }
});

// node_modules/google-maps-react/dist/components/Marker.js
var require_Marker = __commonJS({
  "node_modules/google-maps-react/dist/components/Marker.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.String);
        global2.Marker = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Marker = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "dblclick", "dragend", "mousedown", "mouseout", "mouseover", "mouseup", "recenter"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var Marker = exports2.Marker = function(_React$Component) {
        _inherits(Marker2, _React$Component);
        function Marker2() {
          _classCallCheck(this, Marker2);
          return _possibleConstructorReturn(this, (Marker2.__proto__ || Object.getPrototypeOf(Marker2)).apply(this, arguments));
        }
        _createClass(Marker2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.markerPromise = wrappedPromise();
            this.renderMarker();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.map !== prevProps.map || this.props.position !== prevProps.position || this.props.icon !== prevProps.icon) {
              if (this.marker) {
                this.marker.setMap(null);
              }
              this.renderMarker();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.marker) {
              this.marker.setMap(null);
            }
          }
        }, {
          key: "renderMarker",
          value: function renderMarker() {
            var _this2 = this;
            var _props = this.props, map = _props.map, google2 = _props.google, position = _props.position, mapCenter = _props.mapCenter, icon = _props.icon, label = _props.label, draggable = _props.draggable, title = _props.title, props = _objectWithoutProperties(_props, ["map", "google", "position", "mapCenter", "icon", "label", "draggable", "title"]);
            if (!google2) {
              return null;
            }
            var pos = position || mapCenter;
            if (!(pos instanceof google2.maps.LatLng)) {
              pos = new google2.maps.LatLng(pos.lat, pos.lng);
            }
            var pref = _extends({
              map,
              position: pos,
              icon,
              label,
              title,
              draggable
            }, props);
            this.marker = new google2.maps.Marker(pref);
            evtNames.forEach(function(e) {
              _this2.marker.addListener(e, _this2.handleEvent(e));
            });
            this.markerPromise.resolve(this.marker);
          }
        }, {
          key: "getMarker",
          value: function getMarker() {
            return this.markerPromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.marker, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return Marker2;
      }(_react2.default.Component);
      Marker.propTypes = {
        position: _propTypes2.default.object,
        map: _propTypes2.default.object
      };
      evtNames.forEach(function(e) {
        return Marker.propTypes[e] = _propTypes2.default.func;
      });
      Marker.defaultProps = {
        name: "Marker"
      };
      exports2.default = Marker;
    });
  }
});

// node_modules/google-maps-react/dist/components/InfoWindow.js
var require_InfoWindow = __commonJS({
  "node_modules/google-maps-react/dist/components/InfoWindow.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "react-dom", "react-dom/server"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_react_dom(), require_server_browser());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.reactDom, global2.server);
        global2.InfoWindow = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _reactDom, _server) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.InfoWindow = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _reactDom2 = _interopRequireDefault(_reactDom);
      var _server2 = _interopRequireDefault(_server);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var InfoWindow = exports2.InfoWindow = function(_React$Component) {
        _inherits(InfoWindow2, _React$Component);
        function InfoWindow2() {
          _classCallCheck(this, InfoWindow2);
          return _possibleConstructorReturn(this, (InfoWindow2.__proto__ || Object.getPrototypeOf(InfoWindow2)).apply(this, arguments));
        }
        _createClass(InfoWindow2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.renderInfoWindow();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var _props = this.props, google2 = _props.google, map = _props.map;
            if (!google2 || !map) {
              return;
            }
            if (map !== prevProps.map) {
              this.renderInfoWindow();
            }
            if (this.props.position !== prevProps.position) {
              this.updatePosition();
            }
            if (this.props.children !== prevProps.children) {
              this.updateContent();
            }
            if (this.props.visible !== prevProps.visible || this.props.marker !== prevProps.marker || this.props.position !== prevProps.position) {
              this.props.visible ? this.openWindow() : this.closeWindow();
            }
          }
        }, {
          key: "renderInfoWindow",
          value: function renderInfoWindow() {
            var _props2 = this.props, map = _props2.map, google2 = _props2.google, mapCenter = _props2.mapCenter, props = _objectWithoutProperties(_props2, ["map", "google", "mapCenter"]);
            if (!google2 || !google2.maps) {
              return;
            }
            var iw = this.infowindow = new google2.maps.InfoWindow(_extends({
              content: ""
            }, props));
            google2.maps.event.addListener(iw, "closeclick", this.onClose.bind(this));
            google2.maps.event.addListener(iw, "domready", this.onOpen.bind(this));
          }
        }, {
          key: "onOpen",
          value: function onOpen() {
            if (this.props.onOpen) {
              this.props.onOpen();
            }
          }
        }, {
          key: "onClose",
          value: function onClose() {
            if (this.props.onClose) {
              this.props.onClose();
            }
          }
        }, {
          key: "openWindow",
          value: function openWindow() {
            this.infowindow.open(this.props.map, this.props.marker);
          }
        }, {
          key: "updatePosition",
          value: function updatePosition() {
            var pos = this.props.position;
            if (!(pos instanceof google.maps.LatLng)) {
              pos = pos && new google.maps.LatLng(pos.lat, pos.lng);
            }
            this.infowindow.setPosition(pos);
          }
        }, {
          key: "updateContent",
          value: function updateContent() {
            var content = this.renderChildren();
            this.infowindow.setContent(content);
          }
        }, {
          key: "closeWindow",
          value: function closeWindow() {
            this.infowindow.close();
          }
        }, {
          key: "renderChildren",
          value: function renderChildren() {
            var children = this.props.children;
            return _server2.default.renderToString(children);
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return InfoWindow2;
      }(_react2.default.Component);
      InfoWindow.propTypes = {
        children: _propTypes2.default.element.isRequired,
        map: _propTypes2.default.object,
        marker: _propTypes2.default.object,
        position: _propTypes2.default.object,
        visible: _propTypes2.default.bool,
        // callbacks
        onClose: _propTypes2.default.func,
        onOpen: _propTypes2.default.func
      };
      InfoWindow.defaultProps = {
        visible: false
      };
      exports2.default = InfoWindow;
    });
  }
});

// node_modules/google-maps-react/dist/components/HeatMap.js
var require_HeatMap = __commonJS({
  "node_modules/google-maps-react/dist/components/HeatMap.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.String);
        global2.HeatMap = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.HeatMap = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "mouseover", "recenter"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var HeatMap = exports2.HeatMap = function(_React$Component) {
        _inherits(HeatMap2, _React$Component);
        function HeatMap2() {
          _classCallCheck(this, HeatMap2);
          return _possibleConstructorReturn(this, (HeatMap2.__proto__ || Object.getPrototypeOf(HeatMap2)).apply(this, arguments));
        }
        _createClass(HeatMap2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.heatMapPromise = wrappedPromise();
            this.renderHeatMap();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.map !== prevProps.map || this.props.position !== prevProps.position) {
              if (this.heatMap) {
                this.heatMap.setMap(null);
                this.renderHeatMap();
              }
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.heatMap) {
              this.heatMap.setMap(null);
            }
          }
        }, {
          key: "renderHeatMap",
          value: function renderHeatMap() {
            var _this2 = this;
            var _props = this.props, map = _props.map, google2 = _props.google, positions = _props.positions, mapCenter = _props.mapCenter, icon = _props.icon, gradient = _props.gradient, _props$radius = _props.radius, radius = _props$radius === void 0 ? 20 : _props$radius, _props$opacity = _props.opacity, opacity = _props$opacity === void 0 ? 0.2 : _props$opacity, props = _objectWithoutProperties(_props, ["map", "google", "positions", "mapCenter", "icon", "gradient", "radius", "opacity"]);
            if (!google2) {
              return null;
            }
            var data = positions.map(function(pos) {
              return { location: new google2.maps.LatLng(pos.lat, pos.lng), weight: pos.weight };
            });
            var pref = _extends({
              map,
              gradient,
              radius,
              opacity,
              data
            }, props);
            this.heatMap = new google2.maps.visualization.HeatmapLayer(pref);
            this.heatMap.set("radius", radius === void 0 ? 20 : radius);
            this.heatMap.set("opacity", opacity === void 0 ? 0.2 : opacity);
            evtNames.forEach(function(e) {
              _this2.heatMap.addListener(e, _this2.handleEvent(e));
            });
            this.heatMapPromise.resolve(this.heatMap);
          }
        }, {
          key: "getHeatMap",
          value: function getHeatMap() {
            return this.heatMapPromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.heatMap, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return HeatMap2;
      }(_react2.default.Component);
      HeatMap.propTypes = {
        position: _propTypes2.default.object,
        map: _propTypes2.default.object,
        icon: _propTypes2.default.string
      };
      evtNames.forEach(function(e) {
        return HeatMap.propTypes[e] = _propTypes2.default.func;
      });
      HeatMap.defaultProps = {
        name: "HeatMap"
      };
      exports2.default = HeatMap;
    });
  }
});

// node_modules/google-maps-react/dist/lib/arePathsEqual.js
var require_arePathsEqual = __commonJS({
  "node_modules/google-maps-react/dist/lib/arePathsEqual.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports);
        global2.arePathsEqual = mod.exports;
      }
    })(exports, function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var arePathsEqual = exports2.arePathsEqual = function arePathsEqual2(pathA, pathB) {
        if (pathA === pathB) {
          return true;
        }
        if (!Array.isArray(pathA) || !Array.isArray(pathB)) {
          return false;
        }
        if (pathA.length !== pathB.length) {
          return false;
        }
        for (var i = 0; i < pathA.length; ++i) {
          if (pathA[i] === pathB[i]) {
            continue;
          }
          if (!isValidLatLng(pathA[i]) || !isValidLatLng(pathB[i])) {
            return false;
          }
          if (pathB[i].lat !== pathA[i].lat || pathB[i].lng !== pathA[i].lng) {
            return false;
          }
        }
        return true;
      };
      var isValidLatLng = function isValidLatLng2(elem) {
        return elem !== null && (typeof elem === "undefined" ? "undefined" : _typeof(elem)) === "object" && elem.hasOwnProperty("lat") && elem.hasOwnProperty("lng");
      };
    });
  }
});

// node_modules/google-maps-react/dist/components/Polygon.js
var require_Polygon = __commonJS({
  "node_modules/google-maps-react/dist/components/Polygon.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/arePathsEqual", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_arePathsEqual(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.arePathsEqual, global2.String);
        global2.Polygon = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _arePathsEqual, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Polygon = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "mouseout", "mouseover"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var Polygon = exports2.Polygon = function(_React$Component) {
        _inherits(Polygon2, _React$Component);
        function Polygon2() {
          _classCallCheck(this, Polygon2);
          return _possibleConstructorReturn(this, (Polygon2.__proto__ || Object.getPrototypeOf(Polygon2)).apply(this, arguments));
        }
        _createClass(Polygon2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.polygonPromise = wrappedPromise();
            this.renderPolygon();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.map !== prevProps.map || !(0, _arePathsEqual.arePathsEqual)(this.props.paths, prevProps.paths)) {
              if (this.polygon) {
                this.polygon.setMap(null);
              }
              this.renderPolygon();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.polygon) {
              this.polygon.setMap(null);
            }
          }
        }, {
          key: "renderPolygon",
          value: function renderPolygon() {
            var _this2 = this;
            var _props = this.props, map = _props.map, google2 = _props.google, paths = _props.paths, strokeColor = _props.strokeColor, strokeOpacity = _props.strokeOpacity, strokeWeight = _props.strokeWeight, fillColor = _props.fillColor, fillOpacity = _props.fillOpacity, props = _objectWithoutProperties(_props, ["map", "google", "paths", "strokeColor", "strokeOpacity", "strokeWeight", "fillColor", "fillOpacity"]);
            if (!google2) {
              return null;
            }
            var params = _extends({
              map,
              paths,
              strokeColor,
              strokeOpacity,
              strokeWeight,
              fillColor,
              fillOpacity
            }, props);
            this.polygon = new google2.maps.Polygon(params);
            evtNames.forEach(function(e) {
              _this2.polygon.addListener(e, _this2.handleEvent(e));
            });
            this.polygonPromise.resolve(this.polygon);
          }
        }, {
          key: "getPolygon",
          value: function getPolygon() {
            return this.polygonPromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.polygon, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return Polygon2;
      }(_react2.default.Component);
      Polygon.propTypes = {
        paths: _propTypes2.default.array,
        strokeColor: _propTypes2.default.string,
        strokeOpacity: _propTypes2.default.number,
        strokeWeight: _propTypes2.default.number,
        fillColor: _propTypes2.default.string,
        fillOpacity: _propTypes2.default.number
      };
      evtNames.forEach(function(e) {
        return Polygon.propTypes[e] = _propTypes2.default.func;
      });
      Polygon.defaultProps = {
        name: "Polygon"
      };
      exports2.default = Polygon;
    });
  }
});

// node_modules/google-maps-react/dist/components/Polyline.js
var require_Polyline = __commonJS({
  "node_modules/google-maps-react/dist/components/Polyline.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/arePathsEqual", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_arePathsEqual(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.arePathsEqual, global2.String);
        global2.Polyline = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _arePathsEqual, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Polyline = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "mouseout", "mouseover"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var Polyline = exports2.Polyline = function(_React$Component) {
        _inherits(Polyline2, _React$Component);
        function Polyline2() {
          _classCallCheck(this, Polyline2);
          return _possibleConstructorReturn(this, (Polyline2.__proto__ || Object.getPrototypeOf(Polyline2)).apply(this, arguments));
        }
        _createClass(Polyline2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.polylinePromise = wrappedPromise();
            this.renderPolyline();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.map !== prevProps.map || !(0, _arePathsEqual.arePathsEqual)(this.props.path, prevProps.path)) {
              if (this.polyline) {
                this.polyline.setMap(null);
              }
              this.renderPolyline();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.polyline) {
              this.polyline.setMap(null);
            }
          }
        }, {
          key: "renderPolyline",
          value: function renderPolyline() {
            var _this2 = this;
            var _props = this.props, map = _props.map, google2 = _props.google, path = _props.path, strokeColor = _props.strokeColor, strokeOpacity = _props.strokeOpacity, strokeWeight = _props.strokeWeight, props = _objectWithoutProperties(_props, ["map", "google", "path", "strokeColor", "strokeOpacity", "strokeWeight"]);
            if (!google2) {
              return null;
            }
            var params = _extends({
              map,
              path,
              strokeColor,
              strokeOpacity,
              strokeWeight
            }, props);
            this.polyline = new google2.maps.Polyline(params);
            evtNames.forEach(function(e) {
              _this2.polyline.addListener(e, _this2.handleEvent(e));
            });
            this.polylinePromise.resolve(this.polyline);
          }
        }, {
          key: "getPolyline",
          value: function getPolyline() {
            return this.polylinePromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.polyline, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return Polyline2;
      }(_react2.default.Component);
      Polyline.propTypes = {
        path: _propTypes2.default.array,
        strokeColor: _propTypes2.default.string,
        strokeOpacity: _propTypes2.default.number,
        strokeWeight: _propTypes2.default.number
      };
      evtNames.forEach(function(e) {
        return Polyline.propTypes[e] = _propTypes2.default.func;
      });
      Polyline.defaultProps = {
        name: "Polyline"
      };
      exports2.default = Polyline;
    });
  }
});

// node_modules/google-maps-react/dist/components/Circle.js
var require_Circle = __commonJS({
  "node_modules/google-maps-react/dist/components/Circle.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/arePathsEqual", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_arePathsEqual(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.arePathsEqual, global2.String);
        global2.Circle = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _arePathsEqual, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Circle = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "mouseout", "mouseover"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var Circle = exports2.Circle = function(_React$Component) {
        _inherits(Circle2, _React$Component);
        function Circle2() {
          var _ref;
          var _temp, _this, _ret;
          _classCallCheck(this, Circle2);
          for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
            args[_key] = arguments[_key];
          }
          return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Circle2.__proto__ || Object.getPrototypeOf(Circle2)).call.apply(_ref, [this].concat(args))), _this), _this.centerChanged = function(newCenter) {
            var _this$props$center = _this.props.center, lat = _this$props$center.lat, lng = _this$props$center.lng;
            return lat !== newCenter.lat || lng !== newCenter.lng;
          }, _this.propsChanged = function(newProps) {
            if (_this.centerChanged(newProps.center))
              return true;
            return Object.keys(Circle2.propTypes).some(function(key) {
              return _this.props[key] !== newProps[key];
            });
          }, _this.destroyCircle = function() {
            if (_this.circle) {
              _this.circle.setMap(null);
            }
          }, _temp), _possibleConstructorReturn(_this, _ret);
        }
        _createClass(Circle2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.circlePromise = wrappedPromise();
            this.renderCircle();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            var _props = this.props, path = _props.path, map = _props.map;
            if (this.propsChanged(prevProps) || map !== prevProps.map || !(0, _arePathsEqual.arePathsEqual)(path, prevProps.path)) {
              this.destroyCircle();
              this.renderCircle();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            this.destroyCircle();
          }
        }, {
          key: "renderCircle",
          value: function renderCircle() {
            var _this2 = this;
            var _props2 = this.props, map = _props2.map, google2 = _props2.google, center = _props2.center, radius = _props2.radius, strokeColor = _props2.strokeColor, strokeOpacity = _props2.strokeOpacity, strokeWeight = _props2.strokeWeight, fillColor = _props2.fillColor, fillOpacity = _props2.fillOpacity, draggable = _props2.draggable, visible = _props2.visible, props = _objectWithoutProperties(_props2, ["map", "google", "center", "radius", "strokeColor", "strokeOpacity", "strokeWeight", "fillColor", "fillOpacity", "draggable", "visible"]);
            if (!google2) {
              return null;
            }
            var params = _extends({}, props, {
              map,
              center,
              radius,
              draggable,
              visible,
              options: {
                strokeColor,
                strokeOpacity,
                strokeWeight,
                fillColor,
                fillOpacity
              }
            });
            this.circle = new google2.maps.Circle(params);
            evtNames.forEach(function(e) {
              _this2.circle.addListener(e, _this2.handleEvent(e));
            });
            this.circlePromise.resolve(this.circle);
          }
        }, {
          key: "getCircle",
          value: function getCircle() {
            return this.circlePromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.circle, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            return null;
          }
        }]);
        return Circle2;
      }(_react2.default.Component);
      Circle.propTypes = {
        center: _propTypes2.default.object,
        radius: _propTypes2.default.number,
        strokeColor: _propTypes2.default.string,
        strokeOpacity: _propTypes2.default.number,
        strokeWeight: _propTypes2.default.number,
        fillColor: _propTypes2.default.string,
        fillOpacity: _propTypes2.default.number,
        draggable: _propTypes2.default.bool,
        visible: _propTypes2.default.bool
      };
      evtNames.forEach(function(e) {
        return Circle.propTypes[e] = _propTypes2.default.func;
      });
      Circle.defaultProps = {
        name: "Circle"
      };
      exports2.default = Circle;
    });
  }
});

// node_modules/google-maps-react/dist/lib/areBoundsEqual.js
var require_areBoundsEqual = __commonJS({
  "node_modules/google-maps-react/dist/lib/areBoundsEqual.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports);
        global2.areBoundsEqual = mod.exports;
      }
    })(exports, function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function(obj) {
        return typeof obj;
      } : function(obj) {
        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
      };
      var areBoundsEqual = exports2.areBoundsEqual = function areBoundsEqual2(boundA, boundB) {
        if (boundA === boundB) {
          return true;
        }
        if (!(boundA instanceof Object) || !(boundB instanceof Object)) {
          return false;
        }
        if (Object.keys(boundA).length !== Object.keys(boundB).length) {
          return false;
        }
        if (!areValidBounds(boundA) || !areValidBounds(boundB)) {
          return false;
        }
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = void 0;
        try {
          for (var _iterator = Object.keys(boundA)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var key = _step.value;
            if (boundA[key] !== boundB[key]) {
              return false;
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
        return true;
      };
      var areValidBounds = function areValidBounds2(elem) {
        return elem !== null && (typeof elem === "undefined" ? "undefined" : _typeof(elem)) === "object" && elem.hasOwnProperty("north") && elem.hasOwnProperty("south") && elem.hasOwnProperty("east") && elem.hasOwnProperty("west");
      };
    });
  }
});

// node_modules/google-maps-react/dist/components/Rectangle.js
var require_Rectangle = __commonJS({
  "node_modules/google-maps-react/dist/components/Rectangle.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "react", "prop-types", "../lib/areBoundsEqual", "../lib/String"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_react(), require_prop_types(), require_areBoundsEqual(), require_String());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.react, global2.propTypes, global2.areBoundsEqual, global2.String);
        global2.Rectangle = mod.exports;
      }
    })(exports, function(exports2, _react, _propTypes, _areBoundsEqual, _String) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Rectangle = void 0;
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      var _extends = Object.assign || function(target) {
        for (var i = 1; i < arguments.length; i++) {
          var source = arguments[i];
          for (var key in source) {
            if (Object.prototype.hasOwnProperty.call(source, key)) {
              target[key] = source[key];
            }
          }
        }
        return target;
      };
      function _objectWithoutProperties(obj, keys) {
        var target = {};
        for (var i in obj) {
          if (keys.indexOf(i) >= 0)
            continue;
          if (!Object.prototype.hasOwnProperty.call(obj, i))
            continue;
          target[i] = obj[i];
        }
        return target;
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var evtNames = ["click", "mouseout", "mouseover"];
      var wrappedPromise = function wrappedPromise2() {
        var wrappedPromise3 = {}, promise = new Promise(function(resolve, reject) {
          wrappedPromise3.resolve = resolve;
          wrappedPromise3.reject = reject;
        });
        wrappedPromise3.then = promise.then.bind(promise);
        wrappedPromise3.catch = promise.catch.bind(promise);
        wrappedPromise3.promise = promise;
        return wrappedPromise3;
      };
      var Rectangle = exports2.Rectangle = function(_React$Component) {
        _inherits(Rectangle2, _React$Component);
        function Rectangle2() {
          _classCallCheck(this, Rectangle2);
          return _possibleConstructorReturn(this, (Rectangle2.__proto__ || Object.getPrototypeOf(Rectangle2)).apply(this, arguments));
        }
        _createClass(Rectangle2, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            this.rectanglePromise = wrappedPromise();
            this.renderRectangle();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps) {
            if (this.props.map !== prevProps.map || !(0, _areBoundsEqual.areBoundsEqual)(this.props.bounds, prevProps.bounds)) {
              if (this.rectangle) {
                this.rectangle.setMap(null);
              }
              this.renderRectangle();
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            if (this.rectangle) {
              this.rectangle.setMap(null);
            }
          }
        }, {
          key: "renderRectangle",
          value: function renderRectangle() {
            var _this2 = this;
            var _props = this.props, map = _props.map, google2 = _props.google, bounds = _props.bounds, strokeColor = _props.strokeColor, strokeOpacity = _props.strokeOpacity, strokeWeight = _props.strokeWeight, fillColor = _props.fillColor, fillOpacity = _props.fillOpacity, props = _objectWithoutProperties(_props, ["map", "google", "bounds", "strokeColor", "strokeOpacity", "strokeWeight", "fillColor", "fillOpacity"]);
            if (!google2) {
              return null;
            }
            var params = _extends({
              map,
              bounds,
              strokeColor,
              strokeOpacity,
              strokeWeight,
              fillColor,
              fillOpacity
            }, props);
            this.rectangle = new google2.maps.Rectangle(params);
            evtNames.forEach(function(e) {
              _this2.rectangle.addListener(e, _this2.handleEvent(e));
            });
            this.rectanglePromise.resolve(this.rectangle);
          }
        }, {
          key: "getRectangle",
          value: function getRectangle() {
            return this.rectanglePromise;
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evt) {
            var _this3 = this;
            return function(e) {
              var evtName = "on" + (0, _String.camelize)(evt);
              if (_this3.props[evtName]) {
                _this3.props[evtName](_this3.props, _this3.rectangle, e);
              }
            };
          }
        }, {
          key: "render",
          value: function render() {
            console.log("hii, ", this.props.bounds);
            return null;
          }
        }]);
        return Rectangle2;
      }(_react2.default.Component);
      Rectangle.propTypes = {
        bounds: _propTypes2.default.object,
        strokeColor: _propTypes2.default.string,
        strokeOpacity: _propTypes2.default.number,
        strokeWeight: _propTypes2.default.number,
        fillColor: _propTypes2.default.string,
        fillOpacity: _propTypes2.default.number
      };
      evtNames.forEach(function(e) {
        return Rectangle.propTypes[e] = _propTypes2.default.func;
      });
      Rectangle.defaultProps = {
        name: "Rectangle"
      };
      exports2.default = Rectangle;
    });
  }
});

// node_modules/google-maps-react/dist/lib/cancelablePromise.js
var require_cancelablePromise = __commonJS({
  "node_modules/google-maps-react/dist/lib/cancelablePromise.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports);
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports);
        global2.cancelablePromise = mod.exports;
      }
    })(exports, function(exports2) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      var makeCancelable = exports2.makeCancelable = function makeCancelable2(promise) {
        var hasCanceled_ = false;
        var wrappedPromise = new Promise(function(resolve, reject) {
          promise.then(function(val) {
            return hasCanceled_ ? reject({ isCanceled: true }) : resolve(val);
          });
          promise.catch(function(error) {
            return hasCanceled_ ? reject({ isCanceled: true }) : reject(error);
          });
        });
        return {
          promise: wrappedPromise,
          cancel: function cancel() {
            hasCanceled_ = true;
          }
        };
      };
    });
  }
});

// node_modules/google-maps-react/dist/index.js
var require_dist = __commonJS({
  "node_modules/google-maps-react/dist/index.js"(exports) {
    (function(global2, factory) {
      if (typeof define === "function" && define.amd) {
        define(["exports", "./GoogleApiComponent", "./components/Marker", "./components/InfoWindow", "./components/HeatMap", "./components/Polygon", "./components/Polyline", "./components/Circle", "./components/Rectangle", "react", "prop-types", "react-dom", "./lib/String", "./lib/cancelablePromise"], factory);
      } else if (typeof exports !== "undefined") {
        factory(exports, require_GoogleApiComponent(), require_Marker(), require_InfoWindow(), require_HeatMap(), require_Polygon(), require_Polyline(), require_Circle(), require_Rectangle(), require_react(), require_prop_types(), require_react_dom(), require_String(), require_cancelablePromise());
      } else {
        var mod = {
          exports: {}
        };
        factory(mod.exports, global2.GoogleApiComponent, global2.Marker, global2.InfoWindow, global2.HeatMap, global2.Polygon, global2.Polyline, global2.Circle, global2.Rectangle, global2.react, global2.propTypes, global2.reactDom, global2.String, global2.cancelablePromise);
        global2.index = mod.exports;
      }
    })(exports, function(exports2, _GoogleApiComponent, _Marker, _InfoWindow, _HeatMap, _Polygon, _Polyline, _Circle, _Rectangle, _react, _propTypes, _reactDom, _String, _cancelablePromise) {
      "use strict";
      Object.defineProperty(exports2, "__esModule", {
        value: true
      });
      exports2.Map = exports2.Rectangle = exports2.Circle = exports2.Polyline = exports2.Polygon = exports2.HeatMap = exports2.InfoWindow = exports2.Marker = exports2.GoogleApiWrapper = void 0;
      Object.defineProperty(exports2, "GoogleApiWrapper", {
        enumerable: true,
        get: function() {
          return _GoogleApiComponent.wrapper;
        }
      });
      Object.defineProperty(exports2, "Marker", {
        enumerable: true,
        get: function() {
          return _Marker.Marker;
        }
      });
      Object.defineProperty(exports2, "InfoWindow", {
        enumerable: true,
        get: function() {
          return _InfoWindow.InfoWindow;
        }
      });
      Object.defineProperty(exports2, "HeatMap", {
        enumerable: true,
        get: function() {
          return _HeatMap.HeatMap;
        }
      });
      Object.defineProperty(exports2, "Polygon", {
        enumerable: true,
        get: function() {
          return _Polygon.Polygon;
        }
      });
      Object.defineProperty(exports2, "Polyline", {
        enumerable: true,
        get: function() {
          return _Polyline.Polyline;
        }
      });
      Object.defineProperty(exports2, "Circle", {
        enumerable: true,
        get: function() {
          return _Circle.Circle;
        }
      });
      Object.defineProperty(exports2, "Rectangle", {
        enumerable: true,
        get: function() {
          return _Rectangle.Rectangle;
        }
      });
      var _react2 = _interopRequireDefault(_react);
      var _propTypes2 = _interopRequireDefault(_propTypes);
      var _reactDom2 = _interopRequireDefault(_reactDom);
      function _interopRequireDefault(obj) {
        return obj && obj.__esModule ? obj : {
          default: obj
        };
      }
      function _classCallCheck(instance, Constructor) {
        if (!(instance instanceof Constructor)) {
          throw new TypeError("Cannot call a class as a function");
        }
      }
      var _createClass = function() {
        function defineProperties(target, props) {
          for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];
            descriptor.enumerable = descriptor.enumerable || false;
            descriptor.configurable = true;
            if ("value" in descriptor)
              descriptor.writable = true;
            Object.defineProperty(target, descriptor.key, descriptor);
          }
        }
        return function(Constructor, protoProps, staticProps) {
          if (protoProps)
            defineProperties(Constructor.prototype, protoProps);
          if (staticProps)
            defineProperties(Constructor, staticProps);
          return Constructor;
        };
      }();
      function _possibleConstructorReturn(self2, call) {
        if (!self2) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return call && (typeof call === "object" || typeof call === "function") ? call : self2;
      }
      function _inherits(subClass, superClass) {
        if (typeof superClass !== "function" && superClass !== null) {
          throw new TypeError("Super expression must either be null or a function, not " + typeof superClass);
        }
        subClass.prototype = Object.create(superClass && superClass.prototype, {
          constructor: {
            value: subClass,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
        if (superClass)
          Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
      }
      var mapStyles = {
        container: {
          position: "absolute",
          width: "100%",
          height: "100%"
        },
        map: {
          position: "absolute",
          left: 0,
          right: 0,
          bottom: 0,
          top: 0
        }
      };
      var evtNames = ["ready", "click", "dragend", "recenter", "bounds_changed", "center_changed", "dblclick", "dragstart", "heading_change", "idle", "maptypeid_changed", "mousemove", "mouseout", "mouseover", "projection_changed", "resize", "rightclick", "tilesloaded", "tilt_changed", "zoom_changed"];
      var Map2 = exports2.Map = function(_React$Component) {
        _inherits(Map3, _React$Component);
        function Map3(props) {
          _classCallCheck(this, Map3);
          var _this = _possibleConstructorReturn(this, (Map3.__proto__ || Object.getPrototypeOf(Map3)).call(this, props));
          if (!props.hasOwnProperty("google")) {
            throw new Error("You must include a `google` prop");
          }
          _this.listeners = {};
          _this.state = {
            currentLocation: {
              lat: _this.props.initialCenter.lat,
              lng: _this.props.initialCenter.lng
            }
          };
          _this.mapRef = _react2.default.createRef();
          return _this;
        }
        _createClass(Map3, [{
          key: "componentDidMount",
          value: function componentDidMount() {
            var _this2 = this;
            if (this.props.centerAroundCurrentLocation) {
              if (navigator && navigator.geolocation) {
                this.geoPromise = (0, _cancelablePromise.makeCancelable)(new Promise(function(resolve, reject) {
                  navigator.geolocation.getCurrentPosition(resolve, reject);
                }));
                this.geoPromise.promise.then(function(pos) {
                  var coords = pos.coords;
                  _this2.setState({
                    currentLocation: {
                      lat: coords.latitude,
                      lng: coords.longitude
                    }
                  });
                }).catch(function(e) {
                  return e;
                });
              }
            }
            this.loadMap();
          }
        }, {
          key: "componentDidUpdate",
          value: function componentDidUpdate(prevProps, prevState) {
            if (prevProps.google !== this.props.google) {
              this.loadMap();
            }
            if (this.props.visible !== prevProps.visible) {
              this.restyleMap();
            }
            if (this.props.zoom !== prevProps.zoom) {
              this.map.setZoom(this.props.zoom);
            }
            if (this.props.center !== prevProps.center) {
              this.setState({
                currentLocation: this.props.center
              });
            }
            if (prevState.currentLocation !== this.state.currentLocation) {
              this.recenterMap();
            }
            if (this.props.bounds && this.props.bounds !== prevProps.bounds) {
              this.map.fitBounds(this.props.bounds);
            }
          }
        }, {
          key: "componentWillUnmount",
          value: function componentWillUnmount() {
            var _this3 = this;
            var google2 = this.props.google;
            if (this.geoPromise) {
              this.geoPromise.cancel();
            }
            Object.keys(this.listeners).forEach(function(e) {
              google2.maps.event.removeListener(_this3.listeners[e]);
            });
          }
        }, {
          key: "loadMap",
          value: function loadMap() {
            var _this4 = this;
            if (this.props && this.props.google) {
              var google2 = this.props.google;
              var maps = google2.maps;
              var mapRef = this.mapRef.current;
              var node = _reactDom2.default.findDOMNode(mapRef);
              var curr = this.state.currentLocation;
              var center = new maps.LatLng(curr.lat, curr.lng);
              var mapTypeIds = this.props.google.maps.MapTypeId || {};
              var mapTypeFromProps = String(this.props.mapType).toUpperCase();
              var mapConfig = Object.assign({}, {
                mapTypeId: mapTypeIds[mapTypeFromProps],
                center,
                zoom: this.props.zoom,
                maxZoom: this.props.maxZoom,
                minZoom: this.props.minZoom,
                clickableIcons: !!this.props.clickableIcons,
                disableDefaultUI: this.props.disableDefaultUI,
                zoomControl: this.props.zoomControl,
                zoomControlOptions: this.props.zoomControlOptions,
                mapTypeControl: this.props.mapTypeControl,
                mapTypeControlOptions: this.props.mapTypeControlOptions,
                scaleControl: this.props.scaleControl,
                streetViewControl: this.props.streetViewControl,
                streetViewControlOptions: this.props.streetViewControlOptions,
                panControl: this.props.panControl,
                rotateControl: this.props.rotateControl,
                fullscreenControl: this.props.fullscreenControl,
                scrollwheel: this.props.scrollwheel,
                draggable: this.props.draggable,
                draggableCursor: this.props.draggableCursor,
                keyboardShortcuts: this.props.keyboardShortcuts,
                disableDoubleClickZoom: this.props.disableDoubleClickZoom,
                noClear: this.props.noClear,
                styles: this.props.styles,
                gestureHandling: this.props.gestureHandling
              });
              Object.keys(mapConfig).forEach(function(key) {
                if (mapConfig[key] === null) {
                  delete mapConfig[key];
                }
              });
              this.map = new maps.Map(node, mapConfig);
              evtNames.forEach(function(e) {
                _this4.listeners[e] = _this4.map.addListener(e, _this4.handleEvent(e));
              });
              maps.event.trigger(this.map, "ready");
              this.forceUpdate();
            }
          }
        }, {
          key: "handleEvent",
          value: function handleEvent(evtName) {
            var _this5 = this;
            var timeout = void 0;
            var handlerName = "on" + (0, _String.camelize)(evtName);
            return function(e) {
              if (timeout) {
                clearTimeout(timeout);
                timeout = null;
              }
              timeout = setTimeout(function() {
                if (_this5.props[handlerName]) {
                  _this5.props[handlerName](_this5.props, _this5.map, e);
                }
              }, 0);
            };
          }
        }, {
          key: "recenterMap",
          value: function recenterMap() {
            var map = this.map;
            var google2 = this.props.google;
            if (!google2)
              return;
            var maps = google2.maps;
            if (map) {
              var center = this.state.currentLocation;
              if (!(center instanceof google2.maps.LatLng)) {
                center = new google2.maps.LatLng(center.lat, center.lng);
              }
              map.setCenter(center);
              maps.event.trigger(map, "recenter");
            }
          }
        }, {
          key: "restyleMap",
          value: function restyleMap() {
            if (this.map) {
              var google2 = this.props.google;
              google2.maps.event.trigger(this.map, "resize");
            }
          }
        }, {
          key: "renderChildren",
          value: function renderChildren() {
            var _this6 = this;
            var children = this.props.children;
            if (!children)
              return;
            return _react2.default.Children.map(children, function(c) {
              if (!c)
                return;
              return _react2.default.cloneElement(c, {
                map: _this6.map,
                google: _this6.props.google,
                mapCenter: _this6.state.currentLocation
              });
            });
          }
        }, {
          key: "render",
          value: function render() {
            var style = Object.assign({}, mapStyles.map, this.props.style, {
              display: this.props.visible ? "inherit" : "none"
            });
            var containerStyles = Object.assign({}, mapStyles.container, this.props.containerStyle);
            return _react2.default.createElement(
              "div",
              { style: containerStyles, className: this.props.className },
              _react2.default.createElement(
                "div",
                { style, ref: this.mapRef },
                "Loading map..."
              ),
              this.renderChildren()
            );
          }
        }]);
        return Map3;
      }(_react2.default.Component);
      Map2.propTypes = {
        google: _propTypes2.default.object,
        zoom: _propTypes2.default.number,
        centerAroundCurrentLocation: _propTypes2.default.bool,
        center: _propTypes2.default.object,
        initialCenter: _propTypes2.default.object,
        className: _propTypes2.default.string,
        style: _propTypes2.default.object,
        containerStyle: _propTypes2.default.object,
        visible: _propTypes2.default.bool,
        mapType: _propTypes2.default.string,
        maxZoom: _propTypes2.default.number,
        minZoom: _propTypes2.default.number,
        clickableIcons: _propTypes2.default.bool,
        disableDefaultUI: _propTypes2.default.bool,
        zoomControl: _propTypes2.default.bool,
        zoomControlOptions: _propTypes2.default.object,
        mapTypeControl: _propTypes2.default.bool,
        mapTypeControlOptions: _propTypes2.default.bool,
        scaleControl: _propTypes2.default.bool,
        streetViewControl: _propTypes2.default.bool,
        streetViewControlOptions: _propTypes2.default.object,
        panControl: _propTypes2.default.bool,
        rotateControl: _propTypes2.default.bool,
        fullscreenControl: _propTypes2.default.bool,
        scrollwheel: _propTypes2.default.bool,
        draggable: _propTypes2.default.bool,
        draggableCursor: _propTypes2.default.string,
        keyboardShortcuts: _propTypes2.default.bool,
        disableDoubleClickZoom: _propTypes2.default.bool,
        noClear: _propTypes2.default.bool,
        styles: _propTypes2.default.array,
        gestureHandling: _propTypes2.default.string,
        bounds: _propTypes2.default.object
      };
      evtNames.forEach(function(e) {
        return Map2.propTypes[(0, _String.camelize)(e)] = _propTypes2.default.func;
      });
      Map2.defaultProps = {
        zoom: 14,
        initialCenter: {
          lat: 37.774929,
          lng: -122.419416
        },
        center: {},
        centerAroundCurrentLocation: false,
        style: {},
        containerStyle: {},
        visible: true
      };
      exports2.default = Map2;
    });
  }
});
export default require_dist();
//# sourceMappingURL=google-maps-react.js.map
